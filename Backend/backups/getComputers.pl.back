#!/usr/bin/perl

use strict;
use warnings;
use JSON;
use DateTime;

my %grouped_data;

my $command = q{grep -Ea '.*\$@.*LDAP/[^/]+@' /var/log/samba/samba.log | awk '{split($3, a, "@"); split($5, b, ":"); print a[1], b[2]}'};

my @lines = `$command`;
chomp @lines;

foreach my $line (@lines) {
    next if $line =~ /^\s*$/; # Saltar líneas vacías
    my ($computer, $ip) = split /\s+/, $line;

    my $data = get_computer_info($computer, $ip);
    if ($data && defined $data->{Lugar}) {
        push @{$grouped_data{$data->{Lugar}}}, {
            lastLogon        => $data->{lastLogon},
            logonCount       => $data->{logonCount},
            operatingSystem  => $data->{operatingSystem},
            id               => $data->{id},
            IP               => $data->{IP},
            status           => $data->{status},
        };
    }
}

my $json = JSON->new->utf8->pretty->encode(\%grouped_data);
print $json, "\n";

sub get_computer_info {
    my ($computer, $ip) = @_;
    #    $computer .= '$' unless $computer =~ /\$$/;

    my $command = "samba-tool computer show ${computer}";

    my @output = `$command 2>/dev/null`;
    my $exit_code = $? >> 8;

    return undef if $exit_code != 0 || !@output;

    my %info;
    my $nombre_completo = '';
    my $lastLogon_epoch = 0;

    foreach my $line (@output) {
        chomp $line;
        if ($line =~ /^lastLogon:\s+(\d+)/) {
            $lastLogon_epoch = $1;
            $info{lastLogon} = convert_epoch($lastLogon_epoch);
        } elsif ($line =~ /^logonCount:\s+(\d+)/) {
            $info{logonCount} = $1;
        } elsif ($line =~ /^operatingSystem:\s+(.+)/) {
            $info{operatingSystem} = $1;
        } elsif ($line =~ /^name:\s+(.+)/) {
            $nombre_completo = $1;
        }
    }

    my ($lugar, $id) = split(/-/, $nombre_completo, 2);
    $info{Lugar} = $lugar // 'Unknown';
    $info{id}    = $id    // 'Unknown';
    $info{IP} = $ip || 'Unknown';
    $info{status} = determine_status($lastLogon_epoch);

    # Valores predeterminados
    $info{lastLogon}       ||= 'Unknown';
    $info{logonCount}      ||= 0;
    $info{operatingSystem} ||= 'Unknown';
    $info{id}              ||= 'Unknown';
    $info{IP}              ||= 'Unknown';
    $info{status}          ||= 'Activa';

    return \%info;
}

sub convert_epoch {
    my ($lastLogon) = @_;
    return 'Never' if $lastLogon == 0;
    my $epoch = ($lastLogon / 10000000) - 11644473600;
    # Ajustar a la zona horaria local (UTC-8)
    my $dt = DateTime->from_epoch(epoch => $epoch, time_zone => 'local');
    return $dt->strftime('%d/%m/%Y %H:%M:%S');
}

sub determine_status {
    my ($lastLogon) = @_;
    return 'Unknown' if $lastLogon == 0;

    my $lastLogon_epoch = ($lastLogon / 10000000) - 11644473600;
    my $dt_lastLogon = DateTime->from_epoch(epoch => $lastLogon_epoch, time_zone => 'local');
    my $dt_now = DateTime->now(time_zone => 'UTC');

    my $months_diff = ($dt_now->year - $dt_lastLogon->year) * 12 + ($dt_now->month - $dt_lastLogon->month);

    if ($months_diff > 3) {
        return 'Desconocido';
    } else {
        return 'Activa';
    }
}
